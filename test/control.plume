// Test 'if false'
\if {1==2} foo
// Result

// End

// Test 'if false else'
\if {1==2} foo \else bar
// Result
 bar
// End

// Test 'if true'
\if {1==1} foo
// Result
foo
// End

// Test 'if true else'
\if {1==1} foo \else bar
// Result
foo 
// End

// Test 'if true else 2'
\if {1==1} foo//
\else bar
// Result
foo
// End

// Test 'if elseif'
\if {1==2} foo \elseif {1==1} bar \else baz
// Result
 bar 
// End

// Test 'Simple while'
#{a=0}//
\while a<10 {#{a = a+1} #a}
// Result
 1 2 3 4 5 6 7 8 9 10
// End

// Test 'To many loops'
#{a=0}//
\while a<10000 {#{a = a+1} #a}
// Error
File 'string', line 2 : To many loop repetition (over the configurated limit of 1000).
    \while a<10000 {#{a = a+1} #a}
           ^^^^^^^
Traceback :
    File 'string', line 2 : \while a<10000 {#{a = a+1} #a}
                            ^^^^^^
// End

// Test 'simple for'
\for i=1,3 {//
    Ligne #i
}
// Result
Ligne 1
Ligne 2
Ligne 3

// End

// Test 'less simple for'
#{x = 6}//
\for i=1,x,2 {//
    Ligne #i
}
// Result
Ligne 1
Ligne 3
Ligne 5

// End

// Test 'for throught table'
#{t = {1, 4, 9}}//
\for {k, v in ipairs(t)} {//
    #k:#v
}
// Result
1:1
2:4
3:9

// End

// Test 'for - empty'
\for {i in pairs({})} {}
// Result

// End

// Test 'for - unknow iterator'
\for {j} foo
// Error
File 'string', line 1 : Non valid syntax for iterator.
    \for {j} foo
         ^^^
Traceback :
    File 'string', line 1 : \for {j} foo
                            ^^^^
// End

// Test 'for - nil iterator'
\for {x in pairs(nil)} {}
// Error Lua 5.3 Lua 5.4
File 'string', line 1 : (lua error) bad argument #1 to 'for iterator' (table expected, got nil)
    \for {x in pairs(nil)} {}
         ^^^^^^^^^^^^^^^^^
Traceback :
    File 'string', line 1 : \for {x in pairs(nil)} {}
                            ^^^^
// End

// Test 'for - nil iterator'
\for {x in pairs(nil)} {}
// Error Lua 5.2 Lua 5.1
File 'string', line 1 : (lua error) bad argument #1 to 'pairs' (table expected, got nil)
    \for {x in pairs(nil)} {}
         ^^^^^^^^^^^^^^^^^
Traceback :
    File 'string', line 1 : \for {x in pairs(nil)} {}
                            ^^^^
// End

// Test 'for - wrong variable number'
#{t = {1, 4, 9}}//
\for {i, j, k in pairs(t)} foo
// Error
File 'string', line 2 : Wrong number of variables, 3 instead of 2.
    \for {i, j, k in pairs(t)} foo
         ^^^^^^^^^^^^^^^^^^^^^
Traceback :
    File 'string', line 2 : \for {i, j, k in pairs(t)} foo
                            ^^^^
// End

// Test 'else without if'
\else foo
// Error
File 'string', line 1 : 'else' macro must be preceded by 'if' or 'elseif'.
    \else foo
    ^^^^^
Traceback :
    File 'string', line 1 : \else foo
                            ^^^^^
// End

// Test 'do'
\do {//
    #{local x = 0}//
    \def foo {//
        #{x = x+1}//
        #x
    }//
}//
\foo//
#{x = 5}//
\foo//
// Result
1
    2
    
// End

// Test 'Nested for'
\def foo[x] {#x}//
\for {j=1,2} {\foo {\for {i=1, 2} {#i}}}
// Result
1212
// End

// Test 'For locals'
\def foo[x] {#x}//
\for {i=1, 2} {//
    \foo {//
        #{local x = 1}//
        #i : #x
    }//
}//
// Result
1 : 1
    2 : 1
    
// End

// Test 'For and closures'
\for {align in ("center left right"):gmatch('%S+')} {//
    \def {#align} {//
        #align//
    }//  
}//
\left
\right
// Result
left
right
// End

// Test 'For and closures 2'
\for {align in ("center left right"):gmatch('%S+')} {//
    \def[content] {#align} {//
        <#align> #content </#align>//
    }//
}//
\left foo
// Result
<left> foo </left>
// End